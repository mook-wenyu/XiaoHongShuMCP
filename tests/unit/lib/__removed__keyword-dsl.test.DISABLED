import { describe, it, expect } from 'vitest';
import { parseDsl, compileDsl } from '../../../src/lib/keyword-dsl';

const norm = async (s: string) => s.toLowerCase();

describe('keyword-dsl: parse', () => {
  it('parses basic AND/OR/NOT with grouping', () => {
    const ast = parseDsl('"独立 游戏" AND (策划|程序) AND NOT 招聘');
    expect(ast).toBeTruthy();
  });

  it('treats whitespace as AND and supports bar OR in term', () => {
    const ast = parseDsl('独立 游戏 策划|程序');
    expect(ast).toBeTruthy();
  });

  it('supports suffix wildcard * in term and phrase', () => {
    const a = parseDsl('策划*');
    const b = parseDsl('"独立 游"*');
    expect(a).toBeTruthy();
    expect(b).toBeTruthy();
  });
});

describe('keyword-dsl: eval', () => {
  const text = '为什么独立游戏排斥纯策划 程序 组队';
  const tn = text.toLowerCase();
  const tnNoSpace = tn.replace(/\s+/g, '');

  it('phrase + OR inside group', async () => {
    const ev = await compileDsl('"独立 游戏" AND (策划|程序)', norm);
    expect(ev(tn, tnNoSpace)).toBe(true);
  });

  it('default AND with three tokens', async () => {
    const ev = await compileDsl('独立 游戏 程序', norm);
    expect(ev(tn, tnNoSpace)).toBe(true);
  });

  it('NOT excludes unwanted tokens', async () => {
    const ev = await compileDsl('独立 游戏 AND NOT 招聘', norm);
    expect(ev(tn, tnNoSpace)).toBe(true);
    const ev2 = await compileDsl('独立 游戏 AND 招聘', norm);
    expect(ev2(tn, tnNoSpace)).toBe(false);
  });

  it('suffix wildcard matches variations', async () => {
    const ev = await compileDsl('策划*', norm);
    expect(ev(tn, tnNoSpace)).toBe(true); // 命中“策划 程序”中的“策划”前缀
  });

  it('phrase nospace fallback works', async () => {
    const ev = await compileDsl('"独立 游戏"', norm);
    expect(ev(tn, tnNoSpace)).toBe(true); // "独立 游戏" vs 文本里的“独立游戏”
  });

  it('complex: (A|B) AND C AND NOT (D|E)', async () => {
    const ev = await compileDsl('(独立|独游) AND (策划|程序) AND 组队 AND NOT (招聘|外包)', norm);
    expect(ev(tn, tnNoSpace)).toBe(true);
  });
});
